// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/wallet/chain/p (interfaces: BuilderBackend)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=wallet/chain/p/mocks/mock_builder_backend.go github.com/ava-labs/avalanchego/wallet/chain/p BuilderBackend
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	avax "github.com/ava-labs/avalanchego/vms/components/avax"
	fx "github.com/ava-labs/avalanchego/vms/platformvm/fx"
	gomock "go.uber.org/mock/gomock"
)

// MockBuilderBackend is a mock of BuilderBackend interface.
type MockBuilderBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderBackendMockRecorder
}

// MockBuilderBackendMockRecorder is the mock recorder for MockBuilderBackend.
type MockBuilderBackendMockRecorder struct {
	mock *MockBuilderBackend
}

// NewMockBuilderBackend creates a new mock instance.
func NewMockBuilderBackend(ctrl *gomock.Controller) *MockBuilderBackend {
	mock := &MockBuilderBackend{ctrl: ctrl}
	mock.recorder = &MockBuilderBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderBackend) EXPECT() *MockBuilderBackendMockRecorder {
	return m.recorder
}

// AVAXAssetID mocks base method.
func (m *MockBuilderBackend) AVAXAssetID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AVAXAssetID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// AVAXAssetID indicates an expected call of AVAXAssetID.
func (mr *MockBuilderBackendMockRecorder) AVAXAssetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AVAXAssetID", reflect.TypeOf((*MockBuilderBackend)(nil).AVAXAssetID))
}

// AddPrimaryNetworkDelegatorFee mocks base method.
func (m *MockBuilderBackend) AddPrimaryNetworkDelegatorFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrimaryNetworkDelegatorFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AddPrimaryNetworkDelegatorFee indicates an expected call of AddPrimaryNetworkDelegatorFee.
func (mr *MockBuilderBackendMockRecorder) AddPrimaryNetworkDelegatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrimaryNetworkDelegatorFee", reflect.TypeOf((*MockBuilderBackend)(nil).AddPrimaryNetworkDelegatorFee))
}

// AddPrimaryNetworkValidatorFee mocks base method.
func (m *MockBuilderBackend) AddPrimaryNetworkValidatorFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrimaryNetworkValidatorFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AddPrimaryNetworkValidatorFee indicates an expected call of AddPrimaryNetworkValidatorFee.
func (mr *MockBuilderBackendMockRecorder) AddPrimaryNetworkValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrimaryNetworkValidatorFee", reflect.TypeOf((*MockBuilderBackend)(nil).AddPrimaryNetworkValidatorFee))
}

// AddSubnetDelegatorFee mocks base method.
func (m *MockBuilderBackend) AddSubnetDelegatorFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnetDelegatorFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AddSubnetDelegatorFee indicates an expected call of AddSubnetDelegatorFee.
func (mr *MockBuilderBackendMockRecorder) AddSubnetDelegatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnetDelegatorFee", reflect.TypeOf((*MockBuilderBackend)(nil).AddSubnetDelegatorFee))
}

// AddSubnetValidatorFee mocks base method.
func (m *MockBuilderBackend) AddSubnetValidatorFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnetValidatorFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// AddSubnetValidatorFee indicates an expected call of AddSubnetValidatorFee.
func (mr *MockBuilderBackendMockRecorder) AddSubnetValidatorFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnetValidatorFee", reflect.TypeOf((*MockBuilderBackend)(nil).AddSubnetValidatorFee))
}

// BaseTxFee mocks base method.
func (m *MockBuilderBackend) BaseTxFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseTxFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BaseTxFee indicates an expected call of BaseTxFee.
func (mr *MockBuilderBackendMockRecorder) BaseTxFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseTxFee", reflect.TypeOf((*MockBuilderBackend)(nil).BaseTxFee))
}

// CreateBlockchainTxFee mocks base method.
func (m *MockBuilderBackend) CreateBlockchainTxFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlockchainTxFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CreateBlockchainTxFee indicates an expected call of CreateBlockchainTxFee.
func (mr *MockBuilderBackendMockRecorder) CreateBlockchainTxFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlockchainTxFee", reflect.TypeOf((*MockBuilderBackend)(nil).CreateBlockchainTxFee))
}

// CreateSubnetTxFee mocks base method.
func (m *MockBuilderBackend) CreateSubnetTxFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetTxFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CreateSubnetTxFee indicates an expected call of CreateSubnetTxFee.
func (mr *MockBuilderBackendMockRecorder) CreateSubnetTxFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetTxFee", reflect.TypeOf((*MockBuilderBackend)(nil).CreateSubnetTxFee))
}

// GetSubnetOwner mocks base method.
func (m *MockBuilderBackend) GetSubnetOwner(arg0 context.Context, arg1 ids.ID) (fx.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetOwner", arg0, arg1)
	ret0, _ := ret[0].(fx.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetOwner indicates an expected call of GetSubnetOwner.
func (mr *MockBuilderBackendMockRecorder) GetSubnetOwner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetOwner", reflect.TypeOf((*MockBuilderBackend)(nil).GetSubnetOwner), arg0, arg1)
}

// NetworkID mocks base method.
func (m *MockBuilderBackend) NetworkID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// NetworkID indicates an expected call of NetworkID.
func (mr *MockBuilderBackendMockRecorder) NetworkID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkID", reflect.TypeOf((*MockBuilderBackend)(nil).NetworkID))
}

// TransformSubnetTxFee mocks base method.
func (m *MockBuilderBackend) TransformSubnetTxFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformSubnetTxFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TransformSubnetTxFee indicates an expected call of TransformSubnetTxFee.
func (mr *MockBuilderBackendMockRecorder) TransformSubnetTxFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformSubnetTxFee", reflect.TypeOf((*MockBuilderBackend)(nil).TransformSubnetTxFee))
}

// UTXOs mocks base method.
func (m *MockBuilderBackend) UTXOs(arg0 context.Context, arg1 ids.ID) ([]*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTXOs", arg0, arg1)
	ret0, _ := ret[0].([]*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UTXOs indicates an expected call of UTXOs.
func (mr *MockBuilderBackendMockRecorder) UTXOs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTXOs", reflect.TypeOf((*MockBuilderBackend)(nil).UTXOs), arg0, arg1)
}
